<?php

namespace App\Http\Controllers;

use App\Sound;
use Illuminate\Http\Request;  

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Storage;
use App\File;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
 

class SoundController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $sounds = Sound::latest()->paginate(5);
        return view('admin.sounds.index',compact('sounds'))
            ->with('i', (request()->input('page', 1) -1 ) * 5); 
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('admin.sounds.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {   
        $this->validate($request,[ 
            'campaign' => 'required',
            'title' => 'required',
            'image' => 'required|mimes:mp3,wav' 
        ]);

        $image = $request->file('image');
        $new_name = rand(). '.' . $image->getClientOriginalExtension();
        $image->move(public_path('images'),$new_name); 
        $Sound = new Sound([
            'campaign_id' => $request->campaign,
            'title' => $request->title,
            'original_name' => $new_name 
        ]); 
        if ($Sound->save()) {
           return redirect()->route('sounds.index')->with('success','Sound created successfully.');
        } 
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Sound  $sound
     * @return \Illuminate\Http\Response
     */
    public function show(Sound $sound)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Sound  $sound
     * @return \Illuminate\Http\Response
     */
    public function edit(Sound $sound)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Sound  $sound
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Sound $sound)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Sound  $sound
     * @return \Illuminate\Http\Response
     */
    public function destroy(Sound $sound)
    {
        //
    }
}
